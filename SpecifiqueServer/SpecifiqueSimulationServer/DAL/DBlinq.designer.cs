#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB")]
	public partial class DBlinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertasset(asset instance);
    partial void Updateasset(asset instance);
    partial void Deleteasset(asset instance);
    partial void Inserttrade(trade instance);
    partial void Updatetrade(trade instance);
    partial void Deletetrade(trade instance);
    partial void InsertassetInventory(assetInventory instance);
    partial void UpdateassetInventory(assetInventory instance);
    partial void DeleteassetInventory(assetInventory instance);
    partial void InsertassetValue(assetValue instance);
    partial void UpdateassetValue(assetValue instance);
    partial void DeleteassetValue(assetValue instance);
    partial void InsertcashPerTeam(cashPerTeam instance);
    partial void UpdatecashPerTeam(cashPerTeam instance);
    partial void DeletecashPerTeam(cashPerTeam instance);
    partial void InsertgameTime(gameTime instance);
    partial void UpdategameTime(gameTime instance);
    partial void DeletegameTime(gameTime instance);
    partial void Insertitem(item instance);
    partial void Updateitem(item instance);
    partial void Deleteitem(item instance);
    partial void InsertitemInventory(itemInventory instance);
    partial void UpdateitemInventory(itemInventory instance);
    partial void DeleteitemInventory(itemInventory instance);
    partial void InsertitemOnAssetValue(itemOnAssetValue instance);
    partial void UpdateitemOnAssetValue(itemOnAssetValue instance);
    partial void DeleteitemOnAssetValue(itemOnAssetValue instance);
    partial void InsertitemValue(itemValue instance);
    partial void UpdateitemValue(itemValue instance);
    partial void DeleteitemValue(itemValue instance);
    partial void Insertmsg(msg instance);
    partial void Updatemsg(msg instance);
    partial void Deletemsg(msg instance);
    partial void Insertnotific(notific instance);
    partial void Updatenotific(notific instance);
    partial void Deletenotific(notific instance);
    partial void Insertteam(team instance);
    partial void Updateteam(team instance);
    partial void Deleteteam(team instance);
    #endregion
		
		public DBlinqDataContext() : 
				base(global::DAL.Properties.Settings.Default.DBConnectionString6, mappingSource)
		{
			OnCreated();
		}
		
		public DBlinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBlinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBlinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBlinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<asset> assets
		{
			get
			{
				return this.GetTable<asset>();
			}
		}
		
		public System.Data.Linq.Table<trade> trades
		{
			get
			{
				return this.GetTable<trade>();
			}
		}
		
		public System.Data.Linq.Table<assetInventory> assetInventories
		{
			get
			{
				return this.GetTable<assetInventory>();
			}
		}
		
		public System.Data.Linq.Table<assetValue> assetValues
		{
			get
			{
				return this.GetTable<assetValue>();
			}
		}
		
		public System.Data.Linq.Table<cashPerTeam> cashPerTeams
		{
			get
			{
				return this.GetTable<cashPerTeam>();
			}
		}
		
		public System.Data.Linq.Table<gameTime> gameTimes
		{
			get
			{
				return this.GetTable<gameTime>();
			}
		}
		
		public System.Data.Linq.Table<item> items
		{
			get
			{
				return this.GetTable<item>();
			}
		}
		
		public System.Data.Linq.Table<itemInventory> itemInventories
		{
			get
			{
				return this.GetTable<itemInventory>();
			}
		}
		
		public System.Data.Linq.Table<itemOnAssetValue> itemOnAssetValues
		{
			get
			{
				return this.GetTable<itemOnAssetValue>();
			}
		}
		
		public System.Data.Linq.Table<itemValue> itemValues
		{
			get
			{
				return this.GetTable<itemValue>();
			}
		}
		
		public System.Data.Linq.Table<msg> msgs
		{
			get
			{
				return this.GetTable<msg>();
			}
		}
		
		public System.Data.Linq.Table<notific> notifics
		{
			get
			{
				return this.GetTable<notific>();
			}
		}
		
		public System.Data.Linq.Table<team> teams
		{
			get
			{
				return this.GetTable<team>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.asset")]
	public partial class asset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _assetName;
		
		private System.Nullable<double> _assetPrice;
		
		private string _assetDescription;
		
		private EntitySet<assetInventory> _assetInventories;
		
		private EntitySet<assetValue> _assetValues;
		
		private EntitySet<itemOnAssetValue> _itemOnAssetValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnassetNameChanging(string value);
    partial void OnassetNameChanged();
    partial void OnassetPriceChanging(System.Nullable<double> value);
    partial void OnassetPriceChanged();
    partial void OnassetDescriptionChanging(string value);
    partial void OnassetDescriptionChanged();
    #endregion
		
		public asset()
		{
			this._assetInventories = new EntitySet<assetInventory>(new Action<assetInventory>(this.attach_assetInventories), new Action<assetInventory>(this.detach_assetInventories));
			this._assetValues = new EntitySet<assetValue>(new Action<assetValue>(this.attach_assetValues), new Action<assetValue>(this.detach_assetValues));
			this._itemOnAssetValues = new EntitySet<itemOnAssetValue>(new Action<itemOnAssetValue>(this.attach_itemOnAssetValues), new Action<itemOnAssetValue>(this.detach_itemOnAssetValues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetName", DbType="VarChar(60)")]
		public string assetName
		{
			get
			{
				return this._assetName;
			}
			set
			{
				if ((this._assetName != value))
				{
					this.OnassetNameChanging(value);
					this.SendPropertyChanging();
					this._assetName = value;
					this.SendPropertyChanged("assetName");
					this.OnassetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetPrice", DbType="Float")]
		public System.Nullable<double> assetPrice
		{
			get
			{
				return this._assetPrice;
			}
			set
			{
				if ((this._assetPrice != value))
				{
					this.OnassetPriceChanging(value);
					this.SendPropertyChanging();
					this._assetPrice = value;
					this.SendPropertyChanged("assetPrice");
					this.OnassetPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetDescription", DbType="VarChar(500)")]
		public string assetDescription
		{
			get
			{
				return this._assetDescription;
			}
			set
			{
				if ((this._assetDescription != value))
				{
					this.OnassetDescriptionChanging(value);
					this.SendPropertyChanging();
					this._assetDescription = value;
					this.SendPropertyChanged("assetDescription");
					this.OnassetDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="asset_assetInventory", Storage="_assetInventories", ThisKey="Id", OtherKey="assetId")]
		public EntitySet<assetInventory> assetInventories
		{
			get
			{
				return this._assetInventories;
			}
			set
			{
				this._assetInventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="asset_assetValue", Storage="_assetValues", ThisKey="Id", OtherKey="assetId")]
		public EntitySet<assetValue> assetValues
		{
			get
			{
				return this._assetValues;
			}
			set
			{
				this._assetValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="asset_itemOnAssetValue", Storage="_itemOnAssetValues", ThisKey="Id", OtherKey="assetId")]
		public EntitySet<itemOnAssetValue> itemOnAssetValues
		{
			get
			{
				return this._itemOnAssetValues;
			}
			set
			{
				this._itemOnAssetValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_assetInventories(assetInventory entity)
		{
			this.SendPropertyChanging();
			entity.asset = this;
		}
		
		private void detach_assetInventories(assetInventory entity)
		{
			this.SendPropertyChanging();
			entity.asset = null;
		}
		
		private void attach_assetValues(assetValue entity)
		{
			this.SendPropertyChanging();
			entity.asset = this;
		}
		
		private void detach_assetValues(assetValue entity)
		{
			this.SendPropertyChanging();
			entity.asset = null;
		}
		
		private void attach_itemOnAssetValues(itemOnAssetValue entity)
		{
			this.SendPropertyChanging();
			entity.asset = this;
		}
		
		private void detach_itemOnAssetValues(itemOnAssetValue entity)
		{
			this.SendPropertyChanging();
			entity.asset = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.trade")]
	public partial class trade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ownerId;
		
		private int _buyerId;
		
		private string _buyerName;
		
		private int _parentId;
		
		private System.Nullable<int> _assetId;
		
		private System.Nullable<int> _itemId;
		
		private System.Nullable<double> _price;
		
		private System.Nullable<int> _amount;
		
		private string _tradeText;
		
		private System.Nullable<System.DateTime> _tradeTime;
		
		private System.Nullable<int> _accept;
		
		private string _purchaseName;
		
		private System.Nullable<double> _totalPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnownerIdChanging(int value);
    partial void OnownerIdChanged();
    partial void OnbuyerIdChanging(int value);
    partial void OnbuyerIdChanged();
    partial void OnbuyerNameChanging(string value);
    partial void OnbuyerNameChanged();
    partial void OnparentIdChanging(int value);
    partial void OnparentIdChanged();
    partial void OnassetIdChanging(System.Nullable<int> value);
    partial void OnassetIdChanged();
    partial void OnitemIdChanging(System.Nullable<int> value);
    partial void OnitemIdChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OnamountChanging(System.Nullable<int> value);
    partial void OnamountChanged();
    partial void OntradeTextChanging(string value);
    partial void OntradeTextChanged();
    partial void OntradeTimeChanging(System.Nullable<System.DateTime> value);
    partial void OntradeTimeChanged();
    partial void OnacceptChanging(System.Nullable<int> value);
    partial void OnacceptChanged();
    partial void OnpurchaseNameChanging(string value);
    partial void OnpurchaseNameChanged();
    partial void OntotalPriceChanging(System.Nullable<double> value);
    partial void OntotalPriceChanged();
    #endregion
		
		public trade()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ownerId", DbType="Int NOT NULL")]
		public int ownerId
		{
			get
			{
				return this._ownerId;
			}
			set
			{
				if ((this._ownerId != value))
				{
					this.OnownerIdChanging(value);
					this.SendPropertyChanging();
					this._ownerId = value;
					this.SendPropertyChanged("ownerId");
					this.OnownerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buyerId", DbType="Int NOT NULL")]
		public int buyerId
		{
			get
			{
				return this._buyerId;
			}
			set
			{
				if ((this._buyerId != value))
				{
					this.OnbuyerIdChanging(value);
					this.SendPropertyChanging();
					this._buyerId = value;
					this.SendPropertyChanged("buyerId");
					this.OnbuyerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buyerName", DbType="VarChar(50)")]
		public string buyerName
		{
			get
			{
				return this._buyerName;
			}
			set
			{
				if ((this._buyerName != value))
				{
					this.OnbuyerNameChanging(value);
					this.SendPropertyChanging();
					this._buyerName = value;
					this.SendPropertyChanged("buyerName");
					this.OnbuyerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentId", DbType="Int NOT NULL")]
		public int parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetId", DbType="Int")]
		public System.Nullable<int> assetId
		{
			get
			{
				return this._assetId;
			}
			set
			{
				if ((this._assetId != value))
				{
					this.OnassetIdChanging(value);
					this.SendPropertyChanging();
					this._assetId = value;
					this.SendPropertyChanged("assetId");
					this.OnassetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemId", DbType="Int")]
		public System.Nullable<int> itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int")]
		public System.Nullable<int> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tradeText", DbType="VarChar(600)")]
		public string tradeText
		{
			get
			{
				return this._tradeText;
			}
			set
			{
				if ((this._tradeText != value))
				{
					this.OntradeTextChanging(value);
					this.SendPropertyChanging();
					this._tradeText = value;
					this.SendPropertyChanged("tradeText");
					this.OntradeTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tradeTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> tradeTime
		{
			get
			{
				return this._tradeTime;
			}
			set
			{
				if ((this._tradeTime != value))
				{
					this.OntradeTimeChanging(value);
					this.SendPropertyChanging();
					this._tradeTime = value;
					this.SendPropertyChanged("tradeTime");
					this.OntradeTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accept", DbType="Int")]
		public System.Nullable<int> accept
		{
			get
			{
				return this._accept;
			}
			set
			{
				if ((this._accept != value))
				{
					this.OnacceptChanging(value);
					this.SendPropertyChanging();
					this._accept = value;
					this.SendPropertyChanged("accept");
					this.OnacceptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_purchaseName", DbType="VarChar(50)")]
		public string purchaseName
		{
			get
			{
				return this._purchaseName;
			}
			set
			{
				if ((this._purchaseName != value))
				{
					this.OnpurchaseNameChanging(value);
					this.SendPropertyChanging();
					this._purchaseName = value;
					this.SendPropertyChanged("purchaseName");
					this.OnpurchaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPrice", DbType="Float")]
		public System.Nullable<double> totalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if ((this._totalPrice != value))
				{
					this.OntotalPriceChanging(value);
					this.SendPropertyChanging();
					this._totalPrice = value;
					this.SendPropertyChanged("totalPrice");
					this.OntotalPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.assetInventory")]
	public partial class assetInventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _assetId;
		
		private int _teamId;
		
		private System.Nullable<int> _share;
		
		private EntityRef<asset> _asset;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnassetIdChanging(int value);
    partial void OnassetIdChanged();
    partial void OnteamIdChanging(int value);
    partial void OnteamIdChanged();
    partial void OnshareChanging(System.Nullable<int> value);
    partial void OnshareChanged();
    #endregion
		
		public assetInventory()
		{
			this._asset = default(EntityRef<asset>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetId", DbType="Int NOT NULL")]
		public int assetId
		{
			get
			{
				return this._assetId;
			}
			set
			{
				if ((this._assetId != value))
				{
					if (this._asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassetIdChanging(value);
					this.SendPropertyChanging();
					this._assetId = value;
					this.SendPropertyChanged("assetId");
					this.OnassetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL")]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_share", DbType="Int")]
		public System.Nullable<int> share
		{
			get
			{
				return this._share;
			}
			set
			{
				if ((this._share != value))
				{
					this.OnshareChanging(value);
					this.SendPropertyChanging();
					this._share = value;
					this.SendPropertyChanged("share");
					this.OnshareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="asset_assetInventory", Storage="_asset", ThisKey="assetId", OtherKey="Id", IsForeignKey=true)]
		public asset asset
		{
			get
			{
				return this._asset.Entity;
			}
			set
			{
				asset previousValue = this._asset.Entity;
				if (((previousValue != value) 
							|| (this._asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._asset.Entity = null;
						previousValue.assetInventories.Remove(this);
					}
					this._asset.Entity = value;
					if ((value != null))
					{
						value.assetInventories.Add(this);
						this._assetId = value.Id;
					}
					else
					{
						this._assetId = default(int);
					}
					this.SendPropertyChanged("asset");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_assetInventory", Storage="_team", ThisKey="teamId", OtherKey="Id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.assetInventories.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.assetInventories.Add(this);
						this._teamId = value.Id;
					}
					else
					{
						this._teamId = default(int);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.assetValue")]
	public partial class assetValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _assetId;
		
		private System.Nullable<double> _taxCost;
		
		private System.Nullable<double> _operatingExpenses;
		
		private System.Nullable<double> _incomePerAsset;
		
		private EntityRef<asset> _asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnassetIdChanging(int value);
    partial void OnassetIdChanged();
    partial void OntaxCostChanging(System.Nullable<double> value);
    partial void OntaxCostChanged();
    partial void OnoperatingExpensesChanging(System.Nullable<double> value);
    partial void OnoperatingExpensesChanged();
    partial void OnincomePerAssetChanging(System.Nullable<double> value);
    partial void OnincomePerAssetChanged();
    #endregion
		
		public assetValue()
		{
			this._asset = default(EntityRef<asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetId", DbType="Int NOT NULL")]
		public int assetId
		{
			get
			{
				return this._assetId;
			}
			set
			{
				if ((this._assetId != value))
				{
					if (this._asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassetIdChanging(value);
					this.SendPropertyChanging();
					this._assetId = value;
					this.SendPropertyChanged("assetId");
					this.OnassetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taxCost", DbType="Float")]
		public System.Nullable<double> taxCost
		{
			get
			{
				return this._taxCost;
			}
			set
			{
				if ((this._taxCost != value))
				{
					this.OntaxCostChanging(value);
					this.SendPropertyChanging();
					this._taxCost = value;
					this.SendPropertyChanged("taxCost");
					this.OntaxCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operatingExpenses", DbType="Float")]
		public System.Nullable<double> operatingExpenses
		{
			get
			{
				return this._operatingExpenses;
			}
			set
			{
				if ((this._operatingExpenses != value))
				{
					this.OnoperatingExpensesChanging(value);
					this.SendPropertyChanging();
					this._operatingExpenses = value;
					this.SendPropertyChanged("operatingExpenses");
					this.OnoperatingExpensesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_incomePerAsset", DbType="Float")]
		public System.Nullable<double> incomePerAsset
		{
			get
			{
				return this._incomePerAsset;
			}
			set
			{
				if ((this._incomePerAsset != value))
				{
					this.OnincomePerAssetChanging(value);
					this.SendPropertyChanging();
					this._incomePerAsset = value;
					this.SendPropertyChanged("incomePerAsset");
					this.OnincomePerAssetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="asset_assetValue", Storage="_asset", ThisKey="assetId", OtherKey="Id", IsForeignKey=true)]
		public asset asset
		{
			get
			{
				return this._asset.Entity;
			}
			set
			{
				asset previousValue = this._asset.Entity;
				if (((previousValue != value) 
							|| (this._asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._asset.Entity = null;
						previousValue.assetValues.Remove(this);
					}
					this._asset.Entity = value;
					if ((value != null))
					{
						value.assetValues.Add(this);
						this._assetId = value.Id;
					}
					else
					{
						this._assetId = default(int);
					}
					this.SendPropertyChanged("asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cashPerTeam")]
	public partial class cashPerTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _teamId;
		
		private System.Nullable<double> _cash;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnteamIdChanging(int value);
    partial void OnteamIdChanged();
    partial void OncashChanging(System.Nullable<double> value);
    partial void OncashChanged();
    #endregion
		
		public cashPerTeam()
		{
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL")]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cash", DbType="Float")]
		public System.Nullable<double> cash
		{
			get
			{
				return this._cash;
			}
			set
			{
				if ((this._cash != value))
				{
					this.OncashChanging(value);
					this.SendPropertyChanging();
					this._cash = value;
					this.SendPropertyChanged("cash");
					this.OncashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_cashPerTeam", Storage="_team", ThisKey="teamId", OtherKey="Id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.cashPerTeams.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.cashPerTeams.Add(this);
						this._teamId = value.Id;
					}
					else
					{
						this._teamId = default(int);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.gameTime")]
	public partial class gameTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _currentTime;
		
		private System.Nullable<System.DateTime> _endTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OncurrentTimeChanging(System.Nullable<System.DateTime> value);
    partial void OncurrentTimeChanged();
    partial void OnendTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnendTimeChanged();
    #endregion
		
		public gameTime()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> currentTime
		{
			get
			{
				return this._currentTime;
			}
			set
			{
				if ((this._currentTime != value))
				{
					this.OncurrentTimeChanging(value);
					this.SendPropertyChanging();
					this._currentTime = value;
					this.SendPropertyChanged("currentTime");
					this.OncurrentTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> endTime
		{
			get
			{
				return this._endTime;
			}
			set
			{
				if ((this._endTime != value))
				{
					this.OnendTimeChanging(value);
					this.SendPropertyChanging();
					this._endTime = value;
					this.SendPropertyChanged("endTime");
					this.OnendTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.item")]
	public partial class item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _itemName;
		
		private System.Nullable<double> _itemPrice;
		
		private string _itemDescription;
		
		private EntitySet<itemInventory> _itemInventories;
		
		private EntitySet<itemOnAssetValue> _itemOnAssetValues;
		
		private EntitySet<itemValue> _itemValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnitemNameChanging(string value);
    partial void OnitemNameChanged();
    partial void OnitemPriceChanging(System.Nullable<double> value);
    partial void OnitemPriceChanged();
    partial void OnitemDescriptionChanging(string value);
    partial void OnitemDescriptionChanged();
    #endregion
		
		public item()
		{
			this._itemInventories = new EntitySet<itemInventory>(new Action<itemInventory>(this.attach_itemInventories), new Action<itemInventory>(this.detach_itemInventories));
			this._itemOnAssetValues = new EntitySet<itemOnAssetValue>(new Action<itemOnAssetValue>(this.attach_itemOnAssetValues), new Action<itemOnAssetValue>(this.detach_itemOnAssetValues));
			this._itemValues = new EntitySet<itemValue>(new Action<itemValue>(this.attach_itemValues), new Action<itemValue>(this.detach_itemValues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemName", DbType="VarChar(60)")]
		public string itemName
		{
			get
			{
				return this._itemName;
			}
			set
			{
				if ((this._itemName != value))
				{
					this.OnitemNameChanging(value);
					this.SendPropertyChanging();
					this._itemName = value;
					this.SendPropertyChanged("itemName");
					this.OnitemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemPrice", DbType="Float")]
		public System.Nullable<double> itemPrice
		{
			get
			{
				return this._itemPrice;
			}
			set
			{
				if ((this._itemPrice != value))
				{
					this.OnitemPriceChanging(value);
					this.SendPropertyChanging();
					this._itemPrice = value;
					this.SendPropertyChanged("itemPrice");
					this.OnitemPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemDescription", DbType="VarChar(500)")]
		public string itemDescription
		{
			get
			{
				return this._itemDescription;
			}
			set
			{
				if ((this._itemDescription != value))
				{
					this.OnitemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._itemDescription = value;
					this.SendPropertyChanged("itemDescription");
					this.OnitemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_itemInventory", Storage="_itemInventories", ThisKey="Id", OtherKey="itemId")]
		public EntitySet<itemInventory> itemInventories
		{
			get
			{
				return this._itemInventories;
			}
			set
			{
				this._itemInventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_itemOnAssetValue", Storage="_itemOnAssetValues", ThisKey="Id", OtherKey="itemId")]
		public EntitySet<itemOnAssetValue> itemOnAssetValues
		{
			get
			{
				return this._itemOnAssetValues;
			}
			set
			{
				this._itemOnAssetValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_itemValue", Storage="_itemValues", ThisKey="Id", OtherKey="itemId")]
		public EntitySet<itemValue> itemValues
		{
			get
			{
				return this._itemValues;
			}
			set
			{
				this._itemValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_itemInventories(itemInventory entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_itemInventories(itemInventory entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
		
		private void attach_itemOnAssetValues(itemOnAssetValue entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_itemOnAssetValues(itemOnAssetValue entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
		
		private void attach_itemValues(itemValue entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_itemValues(itemValue entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.itemInventory")]
	public partial class itemInventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _itemId;
		
		private int _teamId;
		
		private System.Nullable<double> _quantity;
		
		private EntityRef<item> _item;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnitemIdChanging(int value);
    partial void OnitemIdChanged();
    partial void OnteamIdChanging(int value);
    partial void OnteamIdChanged();
    partial void OnquantityChanging(System.Nullable<double> value);
    partial void OnquantityChanged();
    #endregion
		
		public itemInventory()
		{
			this._item = default(EntityRef<item>);
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemId", DbType="Int NOT NULL")]
		public int itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL")]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Float")]
		public System.Nullable<double> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_itemInventory", Storage="_item", ThisKey="itemId", OtherKey="Id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.itemInventories.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.itemInventories.Add(this);
						this._itemId = value.Id;
					}
					else
					{
						this._itemId = default(int);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_itemInventory", Storage="_team", ThisKey="teamId", OtherKey="Id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.itemInventories.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.itemInventories.Add(this);
						this._teamId = value.Id;
					}
					else
					{
						this._teamId = default(int);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.itemOnAssetValue")]
	public partial class itemOnAssetValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _assetId;
		
		private int _itemId;
		
		private System.Nullable<double> _ratio;
		
		private EntityRef<asset> _asset;
		
		private EntityRef<item> _item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnassetIdChanging(int value);
    partial void OnassetIdChanged();
    partial void OnitemIdChanging(int value);
    partial void OnitemIdChanged();
    partial void OnratioChanging(System.Nullable<double> value);
    partial void OnratioChanged();
    #endregion
		
		public itemOnAssetValue()
		{
			this._asset = default(EntityRef<asset>);
			this._item = default(EntityRef<item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetId", DbType="Int NOT NULL")]
		public int assetId
		{
			get
			{
				return this._assetId;
			}
			set
			{
				if ((this._assetId != value))
				{
					if (this._asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassetIdChanging(value);
					this.SendPropertyChanging();
					this._assetId = value;
					this.SendPropertyChanged("assetId");
					this.OnassetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemId", DbType="Int NOT NULL")]
		public int itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ratio", DbType="Float")]
		public System.Nullable<double> ratio
		{
			get
			{
				return this._ratio;
			}
			set
			{
				if ((this._ratio != value))
				{
					this.OnratioChanging(value);
					this.SendPropertyChanging();
					this._ratio = value;
					this.SendPropertyChanged("ratio");
					this.OnratioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="asset_itemOnAssetValue", Storage="_asset", ThisKey="assetId", OtherKey="Id", IsForeignKey=true)]
		public asset asset
		{
			get
			{
				return this._asset.Entity;
			}
			set
			{
				asset previousValue = this._asset.Entity;
				if (((previousValue != value) 
							|| (this._asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._asset.Entity = null;
						previousValue.itemOnAssetValues.Remove(this);
					}
					this._asset.Entity = value;
					if ((value != null))
					{
						value.itemOnAssetValues.Add(this);
						this._assetId = value.Id;
					}
					else
					{
						this._assetId = default(int);
					}
					this.SendPropertyChanged("asset");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_itemOnAssetValue", Storage="_item", ThisKey="itemId", OtherKey="Id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.itemOnAssetValues.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.itemOnAssetValues.Add(this);
						this._itemId = value.Id;
					}
					else
					{
						this._itemId = default(int);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.itemValue")]
	public partial class itemValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _itemId;
		
		private System.Nullable<double> _taxCost;
		
		private System.Nullable<double> _storageExpenses;
		
		private System.Nullable<double> _incomePerItem;
		
		private EntityRef<item> _item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnitemIdChanging(int value);
    partial void OnitemIdChanged();
    partial void OntaxCostChanging(System.Nullable<double> value);
    partial void OntaxCostChanged();
    partial void OnstorageExpensesChanging(System.Nullable<double> value);
    partial void OnstorageExpensesChanged();
    partial void OnincomePerItemChanging(System.Nullable<double> value);
    partial void OnincomePerItemChanged();
    #endregion
		
		public itemValue()
		{
			this._item = default(EntityRef<item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemId", DbType="Int NOT NULL")]
		public int itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taxCost", DbType="Float")]
		public System.Nullable<double> taxCost
		{
			get
			{
				return this._taxCost;
			}
			set
			{
				if ((this._taxCost != value))
				{
					this.OntaxCostChanging(value);
					this.SendPropertyChanging();
					this._taxCost = value;
					this.SendPropertyChanged("taxCost");
					this.OntaxCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_storageExpenses", DbType="Float")]
		public System.Nullable<double> storageExpenses
		{
			get
			{
				return this._storageExpenses;
			}
			set
			{
				if ((this._storageExpenses != value))
				{
					this.OnstorageExpensesChanging(value);
					this.SendPropertyChanging();
					this._storageExpenses = value;
					this.SendPropertyChanged("storageExpenses");
					this.OnstorageExpensesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_incomePerItem", DbType="Float")]
		public System.Nullable<double> incomePerItem
		{
			get
			{
				return this._incomePerItem;
			}
			set
			{
				if ((this._incomePerItem != value))
				{
					this.OnincomePerItemChanging(value);
					this.SendPropertyChanging();
					this._incomePerItem = value;
					this.SendPropertyChanged("incomePerItem");
					this.OnincomePerItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_itemValue", Storage="_item", ThisKey="itemId", OtherKey="Id", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.itemValues.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.itemValues.Add(this);
						this._itemId = value.Id;
					}
					else
					{
						this._itemId = default(int);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.msg")]
	public partial class msg : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _teamFromId;
		
		private string _teamFromName;
		
		private int _teamToId;
		
		private string _teamToName;
		
		private int _parentId;
		
		private string _msgSubject;
		
		private string _msgText;
		
		private System.Nullable<System.DateTime> _msgTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnteamFromIdChanging(int value);
    partial void OnteamFromIdChanged();
    partial void OnteamFromNameChanging(string value);
    partial void OnteamFromNameChanged();
    partial void OnteamToIdChanging(int value);
    partial void OnteamToIdChanged();
    partial void OnteamToNameChanging(string value);
    partial void OnteamToNameChanged();
    partial void OnparentIdChanging(int value);
    partial void OnparentIdChanged();
    partial void OnmsgSubjectChanging(string value);
    partial void OnmsgSubjectChanged();
    partial void OnmsgTextChanging(string value);
    partial void OnmsgTextChanged();
    partial void OnmsgTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnmsgTimeChanged();
    #endregion
		
		public msg()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamFromId", DbType="Int NOT NULL")]
		public int teamFromId
		{
			get
			{
				return this._teamFromId;
			}
			set
			{
				if ((this._teamFromId != value))
				{
					this.OnteamFromIdChanging(value);
					this.SendPropertyChanging();
					this._teamFromId = value;
					this.SendPropertyChanged("teamFromId");
					this.OnteamFromIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamFromName", DbType="VarChar(50)")]
		public string teamFromName
		{
			get
			{
				return this._teamFromName;
			}
			set
			{
				if ((this._teamFromName != value))
				{
					this.OnteamFromNameChanging(value);
					this.SendPropertyChanging();
					this._teamFromName = value;
					this.SendPropertyChanged("teamFromName");
					this.OnteamFromNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamToId", DbType="Int NOT NULL")]
		public int teamToId
		{
			get
			{
				return this._teamToId;
			}
			set
			{
				if ((this._teamToId != value))
				{
					this.OnteamToIdChanging(value);
					this.SendPropertyChanging();
					this._teamToId = value;
					this.SendPropertyChanged("teamToId");
					this.OnteamToIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamToName", DbType="VarChar(50)")]
		public string teamToName
		{
			get
			{
				return this._teamToName;
			}
			set
			{
				if ((this._teamToName != value))
				{
					this.OnteamToNameChanging(value);
					this.SendPropertyChanging();
					this._teamToName = value;
					this.SendPropertyChanged("teamToName");
					this.OnteamToNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentId", DbType="Int NOT NULL")]
		public int parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msgSubject", DbType="VarChar(100)")]
		public string msgSubject
		{
			get
			{
				return this._msgSubject;
			}
			set
			{
				if ((this._msgSubject != value))
				{
					this.OnmsgSubjectChanging(value);
					this.SendPropertyChanging();
					this._msgSubject = value;
					this.SendPropertyChanged("msgSubject");
					this.OnmsgSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msgText", DbType="VarChar(600)")]
		public string msgText
		{
			get
			{
				return this._msgText;
			}
			set
			{
				if ((this._msgText != value))
				{
					this.OnmsgTextChanging(value);
					this.SendPropertyChanging();
					this._msgText = value;
					this.SendPropertyChanged("msgText");
					this.OnmsgTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msgTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> msgTime
		{
			get
			{
				return this._msgTime;
			}
			set
			{
				if ((this._msgTime != value))
				{
					this.OnmsgTimeChanging(value);
					this.SendPropertyChanging();
					this._msgTime = value;
					this.SendPropertyChanged("msgTime");
					this.OnmsgTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.notific")]
	public partial class notific : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _teamId;
		
		private string _notificSubject;
		
		private string _notificText;
		
		private System.Nullable<System.DateTime> _notificTime;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnteamIdChanging(int value);
    partial void OnteamIdChanged();
    partial void OnnotificSubjectChanging(string value);
    partial void OnnotificSubjectChanged();
    partial void OnnotificTextChanging(string value);
    partial void OnnotificTextChanged();
    partial void OnnotificTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnnotificTimeChanged();
    #endregion
		
		public notific()
		{
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamId", DbType="Int NOT NULL")]
		public int teamId
		{
			get
			{
				return this._teamId;
			}
			set
			{
				if ((this._teamId != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIdChanging(value);
					this.SendPropertyChanging();
					this._teamId = value;
					this.SendPropertyChanged("teamId");
					this.OnteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificSubject", DbType="VarChar(60)")]
		public string notificSubject
		{
			get
			{
				return this._notificSubject;
			}
			set
			{
				if ((this._notificSubject != value))
				{
					this.OnnotificSubjectChanging(value);
					this.SendPropertyChanging();
					this._notificSubject = value;
					this.SendPropertyChanged("notificSubject");
					this.OnnotificSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificText", DbType="VarChar(200)")]
		public string notificText
		{
			get
			{
				return this._notificText;
			}
			set
			{
				if ((this._notificText != value))
				{
					this.OnnotificTextChanging(value);
					this.SendPropertyChanging();
					this._notificText = value;
					this.SendPropertyChanged("notificText");
					this.OnnotificTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> notificTime
		{
			get
			{
				return this._notificTime;
			}
			set
			{
				if ((this._notificTime != value))
				{
					this.OnnotificTimeChanging(value);
					this.SendPropertyChanging();
					this._notificTime = value;
					this.SendPropertyChanged("notificTime");
					this.OnnotificTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_notific", Storage="_team", ThisKey="teamId", OtherKey="Id", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.notifics.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.notifics.Add(this);
						this._teamId = value.Id;
					}
					else
					{
						this._teamId = default(int);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.team")]
	public partial class team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _teamName;
		
		private EntitySet<assetInventory> _assetInventories;
		
		private EntitySet<cashPerTeam> _cashPerTeams;
		
		private EntitySet<itemInventory> _itemInventories;
		
		private EntitySet<notific> _notifics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnteamNameChanging(string value);
    partial void OnteamNameChanged();
    #endregion
		
		public team()
		{
			this._assetInventories = new EntitySet<assetInventory>(new Action<assetInventory>(this.attach_assetInventories), new Action<assetInventory>(this.detach_assetInventories));
			this._cashPerTeams = new EntitySet<cashPerTeam>(new Action<cashPerTeam>(this.attach_cashPerTeams), new Action<cashPerTeam>(this.detach_cashPerTeams));
			this._itemInventories = new EntitySet<itemInventory>(new Action<itemInventory>(this.attach_itemInventories), new Action<itemInventory>(this.detach_itemInventories));
			this._notifics = new EntitySet<notific>(new Action<notific>(this.attach_notifics), new Action<notific>(this.detach_notifics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamName", DbType="VarChar(60)")]
		public string teamName
		{
			get
			{
				return this._teamName;
			}
			set
			{
				if ((this._teamName != value))
				{
					this.OnteamNameChanging(value);
					this.SendPropertyChanging();
					this._teamName = value;
					this.SendPropertyChanged("teamName");
					this.OnteamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_assetInventory", Storage="_assetInventories", ThisKey="Id", OtherKey="teamId")]
		public EntitySet<assetInventory> assetInventories
		{
			get
			{
				return this._assetInventories;
			}
			set
			{
				this._assetInventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_cashPerTeam", Storage="_cashPerTeams", ThisKey="Id", OtherKey="teamId")]
		public EntitySet<cashPerTeam> cashPerTeams
		{
			get
			{
				return this._cashPerTeams;
			}
			set
			{
				this._cashPerTeams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_itemInventory", Storage="_itemInventories", ThisKey="Id", OtherKey="teamId")]
		public EntitySet<itemInventory> itemInventories
		{
			get
			{
				return this._itemInventories;
			}
			set
			{
				this._itemInventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_notific", Storage="_notifics", ThisKey="Id", OtherKey="teamId")]
		public EntitySet<notific> notifics
		{
			get
			{
				return this._notifics;
			}
			set
			{
				this._notifics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_assetInventories(assetInventory entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_assetInventories(assetInventory entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_cashPerTeams(cashPerTeam entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_cashPerTeams(cashPerTeam entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_itemInventories(itemInventory entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_itemInventories(itemInventory entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
		
		private void attach_notifics(notific entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_notifics(notific entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
	}
}
#pragma warning restore 1591
